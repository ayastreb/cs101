const test = require('tape')
const LinkedList = require('./KeyValueLinkedList')

test('insert', assert => {
  const list = new LinkedList()
  list.insert('A', 1)
  list.insert('B', 2)
  list.insert('C', 3)

  assert.equal(list.length, 3)
  assert.deepEqual(list.keys(), ['C', 'B', 'A'])
  assert.deepEqual(list.values(), [3, 2, 1])
  assert.end()
})

test('find node', assert => {
  const list = new LinkedList()
  list.insert('A', 1)
  list.insert('B', 2)
  list.insert('C', 3)

  assert.deepEqual(list.find('A').value, 1)
  assert.deepEqual(list.find('B').value, 2)
  assert.deepEqual(list.find('C').value, 3)
  assert.deepEqual(list.find('D'), undefined)
  assert.end()
})

test('remove non existing', assert => {
  const list = new LinkedList()
  list.insert('A', 1)
  list.insert('B', 2)
  list.insert('C', 3)

  assert.equal(list.length, 3)
  assert.equal(list.remove(list.find('D')), false)
  assert.equal(list.length, 3)
  assert.end()
})

test('remove from head', assert => {
  const list = new LinkedList()
  list.insert('A', 1)
  list.insert('B', 2)
  list.insert('C', 3)
  list.insert('D', 4)
  assert.equal(list.length, 4)
  assert.equal(list.remove(list.find('D')), true)
  assert.equal(list.length, 3)
  assert.deepEqual(list.find('A').value, 1)
  assert.deepEqual(list.find('B').value, 2)
  assert.deepEqual(list.find('C').value, 3)
  assert.deepEqual(list.find('D'), undefined)
  assert.deepEqual(list.keys(), ['C', 'B', 'A'])
  assert.end()
})

test('remove in the middle', assert => {
  const list = new LinkedList()
  list.insert('A', 1)
  list.insert('B', 2)
  list.insert('C', 3)
  list.insert('D', 4)
  assert.equal(list.length, 4)
  assert.equal(list.remove(list.find('B')), true)
  assert.equal(list.length, 3)
  assert.deepEqual(list.find('A').value, 1)
  assert.deepEqual(list.find('B'), undefined)
  assert.deepEqual(list.find('C').value, 3)
  assert.deepEqual(list.find('D').value, 4)
  assert.deepEqual(list.keys(), ['D', 'C', 'A'])
  assert.end()
})

test('remove from tail', assert => {
  const list = new LinkedList()
  list.insert('A', 1)
  list.insert('B', 2)
  list.insert('C', 3)
  list.insert('D', 4)
  assert.equal(list.length, 4)
  assert.equal(list.remove(list.find('A')), true)
  assert.equal(list.length, 3)
  assert.deepEqual(list.find('A'), undefined)
  assert.deepEqual(list.find('B').value, 2)
  assert.deepEqual(list.find('C').value, 3)
  assert.deepEqual(list.find('D').value, 4)
  assert.deepEqual(list.keys(), ['D', 'C', 'B'])
  assert.end()
})

test('remove all', assert => {
  const list = new LinkedList()
  list.insert('A', 1)
  list.insert('B', 2)
  list.insert('C', 3)
  assert.equal(list.length, 3)
  assert.equal(list.remove(list.find('A')), true)
  assert.equal(list.remove(list.find('B')), true)
  assert.equal(list.remove(list.find('C')), true)
  assert.equal(list.length, 0)
  assert.deepEqual(list.keys(), [])
  assert.end()
})
